import User from '../models/userModel.js';
// рдпрд╣ User рдореЙрдбрд▓ (userModel.js рд╕реЗ) рдЗрдореНрдкреЛрд░реНрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ, рдЬрд┐рд╕рд╕реЗ рд╣рдо рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рд╕реНрдЯреЛрд░ рдХрд┐рдП рдЧрдП рдпреВрдЬрд╝рд░ рдбреЗрдЯрд╛ рдХреЛ рдПрдХреНрд╕реЗрд╕ рдФрд░ рдореИрдиреЗрдЬ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред

export const getUsers = async (req, res) => {
  try {
    const users = await User.findAll();
    res.json(users);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// тЬЕ рдпрд╣ рдлрд╝рдВрдХреНрд╢рди /users API рдХреЛ рд╣реИрдВрдбрд▓ рдХрд░рддрд╛ рд╣реИ рдФрд░ рд╕рднреА рдпреВрдЬрд╝рд░реНрд╕ рдХреА рд▓рд┐рд╕реНрдЯ рдХреЛ рдбреЗрдЯрд╛рдмреЗрд╕ рд╕реЗ рд▓рд╛рддрд╛ рд╣реИред
// ЁЯУМ рд╕реНрдЯреЗрдк-рдмрд╛рдп-рд╕реНрдЯреЗрдк рд╕рдордЭреЗрдВ:

// User.findAll() тЖТ рдпрд╣ Sequelize рдХрд╛ рдореЗрдердб рд╣реИ, рдЬреЛ рд╕рднреА рдпреВрдЬрд╝рд░реНрд╕ рдХреА рд▓рд┐рд╕реНрдЯ рдбреЗрдЯрд╛рдмреЗрд╕ рд╕реЗ рдирд┐рдХрд╛рд▓рддрд╛ рд╣реИред
// res.json(users); тЖТ рдЕрдЧрд░ рдбреЗрдЯрд╛ рдорд┐рд▓ рдЬрд╛рддрд╛ рд╣реИ, рддреЛ рдЙрд╕реЗ JSON рдлреЙрд░реНрдореЗрдЯ рдореЗрдВ рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рдореЗрдВ рднреЗрдЬ рджрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред
// рдПрд░рд░ рд╣реИрдВрдбрд▓рд┐рдВрдЧ тЖТ рдЕрдЧрд░ рдХреЛрдИ рдПрд░рд░ рдЖрддреА рд╣реИ, рддреЛ "500 (Internal Server Error)" рдХреЗ рд╕рд╛рде рдПрд░рд░ рдореИрд╕реЗрдЬ рднреЗрдЬрд╛ рдЬрд╛рддрд╛ рд╣реИред

export const createUser = async (req, res) => {
  try {
    const { name, email } = req.body;
    const newUser = await User.create({ name, email });
    res.json(newUser);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// тЬЕ рдпрд╣ рдлрд╝рдВрдХреНрд╢рди /users API рдХреЛ рд╣реИрдВрдбрд▓ рдХрд░рддрд╛ рд╣реИ рдФрд░ рдирдпрд╛ рдпреВрдЬрд╝рд░ рдЬреЛрдбрд╝рдиреЗ рдХреА рд╕реБрд╡рд┐рдзрд╛ рджреЗрддрд╛ рд╣реИред
// ЁЯУМ рд╕реНрдЯреЗрдк-рдмрд╛рдп-рд╕реНрдЯреЗрдк рд╕рдордЭреЗрдВ:

// req.body тЖТ рдлреНрд░рдВрдЯрдПрдВрдб рдпрд╛ API рд╕реЗ рдЖрдиреЗ рд╡рд╛рд▓реЗ рдбреЗрдЯрд╛ рдХреЛ name рдФрд░ email рдХреЗ рд░реВрдк рдореЗрдВ рдПрдХреНрд╕реЗрд╕ рдХрд░рддрд╛ рд╣реИред
// User.create({ name, email }) тЖТ рдпрд╣ Sequelize рдХрд╛ рдореЗрдердб рд╣реИ, рдЬреЛ рдирдпрд╛ рдпреВрдЬрд╝рд░ рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рдЬреЛрдбрд╝рддрд╛ рд╣реИред
// res.json(newUser); тЖТ рдирдпрд╛ рдпреВрдЬрд╝рд░ рдХреНрд░рд┐рдПрдЯ рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж, рдЙрд╕реЗ JSON рдлреЙрд░реНрдореЗрдЯ рдореЗрдВ рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рдореЗрдВ рднреЗрдЬ рджрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред
// рдПрд░рд░ рд╣реИрдВрдбрд▓рд┐рдВрдЧ тЖТ рдЕрдЧрд░ рдХреЛрдИ рдЧрд▓рддреА рд╣реЛрддреА рд╣реИ, рддреЛ "500 (Internal Server Error)" рдХреЗ рд╕рд╛рде рдПрд░рд░ рдореИрд╕реЗрдЬ рднреЗрдЬрд╛ рдЬрд╛рддрд╛ рд╣реИред


// GET /users тЖТ рд╕рднреА рдпреВрдЬрд╝рд░реНрд╕ рдХреА рд▓рд┐рд╕реНрдЯ рдХреЛ рдбреЗрдЯрд╛рдмреЗрд╕ рд╕реЗ рд▓рд╛рддрд╛ рд╣реИред
// POST /users тЖТ рдирдпрд╛ рдпреВрдЬрд╝рд░ рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рдЬреЛрдбрд╝рддрд╛ рд╣реИред
